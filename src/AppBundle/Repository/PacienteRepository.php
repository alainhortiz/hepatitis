<?php

namespace AppBundle\Repository;

use AppBundle\Entity\CoinfeccionPaciente;
use AppBundle\Entity\Paciente;
use AppBundle\Entity\PacienteTratamientoResultado;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * PacienteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PacienteRepository extends \Doctrine\ORM\EntityRepository
{
    public function buscarPaciente($data)
    {
        try {
            $em = $this->getEntityManager();
            if (trim($data['carnetIdentidad']) != '') {
                $busqueda = $em->getRepository('AppBundle:Paciente')->findBy(array('carnetIdentidad' => $data['carnetIdentidad']));
            }else {
                if (trim($data['nombre']) != '') {
                    if (trim($data['primerApellido']) != '') {
                        if (trim($data['segundoApellido']) != '') {
                            //buscar por los tres campos
                            $busqueda = $em->getRepository('AppBundle:Paciente')->findBy(array(
                                'fonNombre' => metaphone($data['nombre'], 5),
                                'fonPrimerApellido' => metaphone($data['primerApellido'], 5),
                                'fonSegundoApellido' => metaphone($data['segundoApellido'], 5)
                            ));
                        } else {
                            //buscar por nombre y primer apellido
                            $busqueda = $em->getRepository('AppBundle:Paciente')->findBy(array(
                                'fonNombre' => metaphone($data['nombre'], 5),
                                'fonPrimerApellido' => metaphone($data['primerApellido'], 5)
                            ));
                        }
                    } else {

                        if (trim($data['segundoApellido']) != '') {
                            //buscar por nombre y segundo apellido
                            $busqueda = $em->getRepository('AppBundle:Paciente')->findBy(array(
                                'fonNombre' => metaphone($data['nombre'], 5),
                                'fonSegundoApellido' => metaphone($data['segundoApellido'], 5)
                            ));

                        } else {
                            //buscar por nombre
                            $busqueda = $em->getRepository('AppBundle:Paciente')->findBy(array(
                                'fonNombre' => metaphone($data['nombre'], 5),
                            ));
                        }
                    }
                }else {
                    // nombre vacio
                    if (trim($data['primerApellido']) != '') {

                        if (trim($data['segundoApellido']) != '') {
                            //buscar por primer apellido y segundo apellido
                            $busqueda = $em->getRepository('AppBundle:Paciente')->findBy(array(
                                'fonPrimerApellido' => metaphone($data['primerApellido'], 5),
                                'fonSegundoApellido' => metaphone($data['segundoApellido'], 5)
                            ));

                        } else {

                            //buscar por  primer apellido
                            $busqueda = $em->getRepository('AppBundle:Paciente')->findBy(array(
                                'fonPrimerApellido' => metaphone($data['primerApellido'], 5)
                            ));

                        }
                    } else {
                        // busacar por segundo apellido
                        $busqueda = $em->getRepository('AppBundle:Paciente')->findBy(array(
                            'fonSegundoApellido' => metaphone($data['segundoApellido'], 5)
                        ));
                    }
                }
            }
            $msg = count($busqueda) == 0 ? 'No se encontraron registros en esta busqueda' : $busqueda;

        } catch (\Exception $e) {

            return 'Se produjo un error al localizar el paciente';
        }
        return $msg;
    }

    public function masterAgregarPaciente($data , $dataGestante , $dataDireccionResidencia , $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        try{
            $paciente = $em->getRepository('AppBundle:Paciente')->agregarPaciente($data);
            if($data['gestante'] == '1'){
                $pacienteGestante = $em->getRepository('AppBundle:PacienteGestante')->agregarPacienteGestante($dataGestante , $paciente);
                $paciente->setPacienteGestante($pacienteGestante);
            }
            $em->getRepository('AppBundle:PacienteDireccion')->agregarPacienteDireccion($dataDireccionResidencia , $paciente);

            if($data['pacienteEsquemasMedicamentos'] != null){
                $em->getRepository('AppBundle:PacienteEsquemaMedicamento')->agregarEsquemasMedicamentos($data['pacienteEsquemasMedicamentos'] , $paciente);
            }
            if($data['pacientePruebas'] != null){
                $em->getRepository('AppBundle:PacientePrueba')->agregarPruebas($data['pacientePruebas'], $paciente);
            }
            if($data['evolucionesClinicas'] != null){
                $em->getRepository('AppBundle:PacienteTratamientoResultado')->agregarEvolucionesClinicas($paciente , $data['evolucionesClinicas']);
            }else{
                $em->getRepository('AppBundle:PacienteTratamientoResultado')->agregarPacienteTratamientoResultado($paciente , '9');
            }
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Insertar Nuevo Paciente',
                'descripcion' => 'Se insertÃ³  el paciente de nombre: '.$data['nombre'].' '.$data['primerApellido'].' '.$data['segundoApellido'].' y carnet '.$data['carnetIdentidad'],
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
            $em->persist($paciente);
            $em->flush();
            $em->commit();
            $msg = $paciente;

        }catch (\Exception $e){

            $em->rollback();
            $msg = 'Se produjo un error al insertar el paciente';
        }
        return $msg;
    }

    public function agregarPaciente($data){

       try{
            $em = $this->getEntityManager();
            $paciente = new Paciente();
            $paciente->setCarnetIdentidad($data['carnetIdentidad']);
            $paciente->setNombre(strtoupper($data['nombre']));
            $paciente->setPrimerApellido(strtoupper($data['primerApellido']));
            $paciente->setSegundoApellido(strtoupper($data['segundoApellido']));
            $paciente->setEdad($data['edad']);
            $paciente->setSexo($data['sexo']);

            $colorPiel = $em->getRepository('AppBundle:ColorPiel')->find($data['colorPiel']);
            $paciente->setColorPiel($colorPiel);

            $estadoCivil = $em->getRepository('AppBundle:EstadoCivil')->find($data['estadoCivil']);
            $paciente->setEstadoCivil($estadoCivil);

            $nivelEscolaridad = $em->getRepository('AppBundle:NivelEscolaridad')->find($data['nivelEscolaridad']);
            $paciente->setNivelEscolaridad($nivelEscolaridad);

            $ocupacion = $em->getRepository('AppBundle:Ocupacion')->find($data['ocupacion']);
            $paciente->setOcupacion($ocupacion);

            $paciente->setGestante($data['gestante']);
            $paciente->setDireccionCarnet(strtoupper($data['direccionCarnet']));

            $municipioCarnet = $em->getRepository('AppBundle:Municipio')->find($data['municipioCarnet']);
            $paciente->setMunicipioCarnet($municipioCarnet);

            $unidad = $em->getRepository('AppBundle:Unidad')->find($data['unidadAtencion']);
            $paciente->setUnidadAtencion($unidad);

            $paciente->setFechaDiagnostico(new \DateTime($data['fechaDiagnostico']));

            $etiologia = $em->getRepository('AppBundle:Etiologia')->find($data['etiologia']);
            $paciente->setEtiologia($etiologia);

            $tipoHepatitis = $em->getRepository('AppBundle:TipoHepatitis')->find($data['tipoHepatitis']);
            $paciente->setTipoHepatitis($tipoHepatitis);

           if ($data['tipoHepatitis']=='2'){
               $estadioHepatitis = $em->getRepository('AppBundle:EstadioHepatitis')->find($data['estadioHepatitis']);
               $paciente->setEstadioHepatitis($estadioHepatitis);
           }
            $formaInfeccion = $em->getRepository('AppBundle:FormaInfeccion')->find($data['formaInfeccion']);
            $paciente->setFormaInfeccion($formaInfeccion);

            $grupovulnerable = $em->getRepository('AppBundle:GrupoVulnerable')->find($data['grupoVulnerable']);
            $paciente->setGrupoVulnerable($grupovulnerable);

            $fuentePesquisa = $em->getRepository('AppBundle:FuentePesquisa')->find($data['fuentePesquisa']);
            $paciente->setFuentePesquisa($fuentePesquisa);

            if($data['fuentePesquisa'] == '3')
            {
                $motivoFuentePesquisa = $em->getRepository('AppBundle:MotivoFuentePesquisa')->find($data['motivoFuentePesquisa']);
                $paciente->setMotivoFuentePesquisa($motivoFuentePesquisa);
            }

            $paciente->setTransfusion($data['transfusion']);

            if(is_array($data['antecedentesPatologicos'])){

                foreach ( $data['antecedentesPatologicos'] as  $antecedente)
                {
                    $antecedentePatologico = $em->getRepository('AppBundle:AntecedentePatologico')->find($antecedente);
                    $paciente->addAntecedentesPatologico($antecedentePatologico);
                }
            }

            if(is_array($data['coinfecciones'])){

                $em->getRepository('AppBundle:CoinfeccionPaciente')->agregarCoinfeccionesPaciente($paciente , $data['coinfecciones']);
            }

           if(is_array($data['orientacionesSexuales'])){

               foreach ( $data['orientacionesSexuales'] as  $orientacion)
               {
                   $orientacionSexual = $em->getRepository('AppBundle:OrientacionSexual')->findOneBy(array('sigla' => $orientacion));
                   $paciente->addOrientacionesSexuale($orientacionSexual);
               }
           }
           if($data['idCausaFallecimiento'] != 0)
           {
               $causa = $em->getRepository('AppBundle:CausaFallecimiento')->find($data['idCausaFallecimiento']);
               $paciente->setCausaFallecimiento($causa);
           }

            $em->persist($paciente);
            $em->flush();
            $msg = $paciente;

        }catch (\Exception $e)
        {
            $msg = $e->getMessage();
        }

        return $msg;

    }

    public function modificarPacienteGeneral($data , $dataGestante ,$user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        $msg = 'ok';
        try
        {
            $paciente = $em->getRepository('AppBundle:Paciente')->find($data['idPaciente']);
            $paciente->setCarnetIdentidad($data['carnetIdentidad']);
            $paciente->setNombre(strtoupper($data['nombre']));
            $paciente->setPrimerApellido(strtoupper($data['primerApellido']));
            $paciente->setSegundoApellido(strtoupper($data['segundoApellido']));
            $paciente->setEdad($data['edad']);
            $paciente->setSexo($data['sexo']);
            $paciente->setGestante($data['gestante']);

            $colorPiel = $em->getRepository('AppBundle:ColorPiel')->find($data['colorPiel']);
            $paciente->setColorPiel($colorPiel);

            $estadoCivil = $em->getRepository('AppBundle:EstadoCivil')->find($data['estadoCivil']);
            $paciente->setEstadoCivil($estadoCivil);

            $nivelEscolaridad = $em->getRepository('AppBundle:NivelEscolaridad')->find($data['nivelEscolaridad']);
            $paciente->setNivelEscolaridad($nivelEscolaridad);

            $ocupacion = $em->getRepository('AppBundle:Ocupacion')->find($data['ocupacion']);
            $paciente->setOcupacion($ocupacion);


            foreach ($paciente->getOrientacionesSexuales() as $orientacion){ $paciente->removeOrientacionesSexuale($orientacion); }
            if(is_array($data['orientacionesSexuales'])){

                foreach ( $data['orientacionesSexuales'] as  $orientacion)
                {
                    $orientacionSexual = $em->getRepository('AppBundle:OrientacionSexual')->findOneBy(array('sigla' => $orientacion));
                    $paciente->addOrientacionesSexuale($orientacionSexual);
                }
            }

            if($data['gestante'] == 1){

                if($paciente->getPacienteGestante()){

                    $em->getRepository('AppBundle:PacienteGestante')->modificarPacienteGestante($dataGestante , $paciente);

                }else{
                    $em->getRepository('AppBundle:PacienteGestante')->agregarPacienteGestante($dataGestante , $paciente);
                }

            }else{

                if($paciente->getPacienteGestante()){

                    $em->getRepository('AppBundle:PacienteGestante')->eliminarPacienteGestante($paciente->getPacienteGestante()->getId());
                }
            }

            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificar datos generales del paciente',
                'descripcion' => 'Se modificÃ³ los datos generales del paciente con nombre: '.$data['nombre'].' '.$data['primerApellido'].' '.$data['segundoApellido'].' y carnet '.$data['carnetIdentidad'],
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);

            $em->persist($paciente);
            $em->flush();
            $em->commit();

        }catch (\Exception $e)
        {
            $em->rollback();
            $msg = 'Se produjo un error al modificar los datos generales del paciente';
        }
        return $msg;
    }

    public function modificarPacienteLocalizacion($data , $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        $msg = 'ok';
        try
        {
            $paciente = $em->getRepository('AppBundle:Paciente')->find($data['idPaciente']);
            $paciente->setDireccionCarnet(strtoupper($data['direccionCarnet']));

            $municipioCarnet = $em->getRepository('AppBundle:Municipio')->find($data['municipioCarnet']);
            $paciente->setMunicipioCarnet($municipioCarnet);

            $unidad = $em->getRepository('AppBundle:Unidad')->find($data['unidadAtencion']);
            $paciente->setUnidadAtencion($unidad);

            $direccionAnterior = $paciente->getResidenciaDirecciones()->last();

            if($direccionAnterior->getDireccionResidencia() != strtoupper($data['direccionResidencia']) || $direccionAnterior->getMunicipio()->getId() != $data['municipioResidencia'])
            {
                $em->getRepository('AppBundle:PacienteDireccion')->agregarPacienteDireccion($data , $paciente);
                $direccionAnterior->setIsActive(0);
                $em->persist($direccionAnterior);
            }

            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificar localizaciÃ³n ',
                'descripcion' => 'Se modificaron los datos de localizaciÃ³n del paciente con nombre: '.$paciente->getNombre().' '.$paciente->getPrimerApellido().' '.$paciente->getSegundoApellido().' y carnet '.$paciente->getCarnetIdentidad(),
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);

            $em->persist($paciente);
            $em->flush();
            $em->commit();

        }catch (\Exception $e)
        {
            $em->rollback();
            $msg = 'Se produjo un error al modificar los datos de localizaciÃ³n del paciente';
        }

        return $msg;
    }

    public function modificarPacienteDiagnostico($data , $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        $msg = 'ok';
        try
        {
            $em = $this->getEntityManager();
            $paciente = $em->getRepository('AppBundle:Paciente')->find($data['idPaciente']);
            $paciente->setFechaDiagnostico(new \DateTime($data['fechaDiagnostico']));

            $etiologia = $em->getRepository('AppBundle:Etiologia')->find($data['etiologia']);
            $paciente->setEtiologia($etiologia);

            $tipoHepatitis = $em->getRepository('AppBundle:TipoHepatitis')->find($data['tipoHepatitis']);
            $paciente->setTipoHepatitis($tipoHepatitis);

            $formaInfeccion = $em->getRepository('AppBundle:FormaInfeccion')->find($data['formaInfeccion']);
            $paciente->setFormaInfeccion($formaInfeccion);

            $grupovulnerable = $em->getRepository('AppBundle:GrupoVulnerable')->find($data['grupoVulnerable']);
            $paciente->setGrupoVulnerable($grupovulnerable);

            $fuentePesquisa = $em->getRepository('AppBundle:FuentePesquisa')->find($data['fuentePesquisa']);
            $paciente->setFuentePesquisa($fuentePesquisa);

            if($data['tipoHepatitis'] == '2')
            {
                $estadioHepatitis = $em->getRepository('AppBundle:EstadioHepatitis')->find($data['estadioHepatitis']);
                $paciente->setEstadioHepatitis($estadioHepatitis);
            }else{
                $paciente->setEstadioHepatitis(null);
            }

            if($data['fuentePesquisa'] == '3')
            {
                $motivoFuentePesquisa = $em->getRepository('AppBundle:MotivoFuentePesquisa')->find($data['motivoFuentePesquisa']);
                $paciente->setMotivoFuentePesquisa($motivoFuentePesquisa);
            }else{
                $paciente->setMotivoFuentePesquisa(null);
            }

            $paciente->setTransfusion($data['transfusion']);

            if(!empty($data['evolucionesClinicas'])){
                foreach ($paciente->getTratamientoResultados() as $resultado)
                {
                    $paciente->removeTratamientoResultado($resultado);
                    $em->remove($resultado);
                }
                $em->getRepository('AppBundle:PacienteTratamientoResultado')->agregarEvolucionesClinicas($paciente , $data['evolucionesClinicas']);
            }else{
                $em->getRepository('AppBundle:PacienteTratamientoResultado')->agregarPacienteTratamientoResultado($paciente , '9');
            }

            if($data['idCausaFallecimiento'] != 0)
            {
                $causa = $em->getRepository('AppBundle:CausaFallecimiento')->find($data['idCausaFallecimiento']);
                $paciente->setCausaFallecimiento($causa);
            }else{
                $paciente->setCausaFallecimiento(null);
            }

            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificar diagnÃ³stico del paciente',
                'descripcion' => 'Se modificaron datos del diagnÃ³stico del paciente: '.$paciente->getNombre().' '.$paciente->getPrimerApellido().' '.$paciente->getSegundoApellido().' y carnet '.$paciente->getCarnetIdentidad(),
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);

            $em->persist($paciente);
            $em->flush();
            $em->commit();

        }catch (\Exception $e)
        {
            $em->rollback();
            $msg = 'Se produjo un error al modificar los datos de diagnÃ³stico del paciente';
        }
        return $msg;
    }

    public function modificarPacienteEnfemedades($data , $user)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();
        $msg = 'ok';
        try
        {
            $paciente = $em->getRepository('AppBundle:Paciente')->find($data['idPaciente']);

            foreach ($paciente->getAntecedentesPatologicos() as $antecedente){ $paciente->removeAntecedentesPatologico($antecedente);  }
            if(is_array($data['antecedentesPatologicos'])){

                $antecedentesPatologicos = new ArrayCollection();

                foreach( $data['antecedentesPatologicos'] as $antecedente)
                {
                    $antecedentesPatologicos[] = $em->getRepository('AppBundle:AntecedentePatologico')->findOneBy(array('nombre' => $antecedente));
                }
                $paciente->setAntecedentesPatologicos($antecedentesPatologicos);
            }

            foreach ($paciente->getCoinfecciones() as $coinfeccion)
            {
                $paciente->removeCoinfeccione($coinfeccion);
                $em->remove($coinfeccion);
            }

            if(is_array($data['coinfecciones'])){

                $em->getRepository('AppBundle:CoinfeccionPaciente')->agregarCoinfeccionesPaciente($paciente , $data['coinfecciones']);
            }
            $dataTraza = array(
                'username' => $user->getUsername(),
                'nombre' => $user->getNombre(),
                'operacion' => 'Modificar enfermedades del paciente',
                'descripcion' => 'Se modificaron las enfermedades del paciente: '.$paciente->getNombre().' '.$paciente->getPrimerApellido().' '.$paciente->getSegundoApellido().' y carnet '.$paciente->getCarnetIdentidad(),
            );
            $em->getRepository('AppBundle:Traza')-> guardarTraza($dataTraza);
            $em->persist($paciente);
            $em->flush();
            $em->commit();

        }catch (\Exception $e)
        {
            $em->rollback();
            $msg = 'Se produjo un error al modificar la localizaciÃ³n del paciente';
        }

        return $msg;
    }

    public function eliminarPaciente($id)
    {
        try {
            $em = $this->getEntityManager();
            $paciente = $em->getRepository('AppBundle:Paciente')->find($id);

            $em->remove($paciente);
            $em->flush();
            $msg = $paciente;

        } catch (\Exception $e) {

            $msg = 'Se produjo un error al eliminar el paciente';
        }
        return $msg;
    }

    public function reportEtiologia($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }
            $dql = "SELECT p 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND e.id=" .$data['etiologia']. " AND d.isActive = 1";


            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = 'Se produjo un error al buscar el reporte';
        }

        return $pacientes;

    }

    public function reportHemodialisis($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT p FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.formaInfeccion f 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            LEFT JOIN p.coinfecciones r
            JOIN r.coinfeccion c 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND f.id = 2 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            if($data['etiologia'] !== '0') $dql .= " AND e.id= " .$data['etiologia'];
            if($data['coinfeccion'] !== '0') $dql .= " AND c.id= " .$data['coinfeccion'];

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function reportSexo($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }
            $dql = "SELECT p 
            FROM AppBundle:Paciente p 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND p.sexo= '" .$data['sexo']. "' 
            AND d.isActive = 1";


            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function reportCoinfeccion($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }
            $dql = "SELECT p 
            FROM AppBundle:Paciente p 
            JOIN p.coinfecciones r
            JOIN r.coinfeccion c  
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND c.id= '" .$data['coinfeccion']. "' 
            AND d.isActive = 1";


            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function reportEvolucionClinica($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT p 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            JOIN p.tratamientoResultados tr 
            JOIN tr.evolucionClinica ec 
            LEFT JOIN p.coinfecciones r
            JOIN r.coinfeccion c 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND ec.id=" .$data['evolucionClinica']. " AND d.isActive = 1";

            if($data['municipio'] != '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] != '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            if($data['etiologia'] !== '0') $dql .= " AND e.id= " .$data['etiologia'];
            if($data['coinfeccion'] !== '0') $dql .= " AND c.id= " .$data['coinfeccion'];

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoEtiologia($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT e.nombre as etiologia,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            if($data['etiologia'] !== '0') $dql .= " AND e.id= " .$data['etiologia'];

            $dql .= " GROUP BY e.nombre";

            $query = $em->createQuery($dql);
            $pacientesTipo = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientesTipo = $e->getMessage() ;
        }

        return $pacientesTipo;

    }

    public function graficoProvTipoHepatitisB($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT prov.nombre as provincia,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal. "' 
            AND e.id=1 AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY prov.nombre ORDER BY cant DESC";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoProvTipoHepatitisC($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT prov.nombre as provincia,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal. "' 
            AND e.id=2 AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY prov.nombre ORDER BY cant DESC";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoSexo($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT p.sexo,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            if($data['etiologia'] !== '0') $dql .= " AND e.id= " .$data['etiologia'];

            $dql .= " GROUP BY p.sexo";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoCoinfeccion($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }
            $dql = "SELECT c.nombre as coinfeccion ,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.coinfecciones r
            JOIN r.coinfeccion c 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND d.isActive = 1";


            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY c.nombre";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoHemodialisis($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT e.nombre as etiologia,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.formaInfeccion f 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND f.id = 2 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            if($data['etiologia'] !== '0') $dql .= " AND e.id= " .$data['etiologia'];

            $dql .= " GROUP BY e.nombre ORDER BY e.id ASC";

            $query = $em->createQuery($dql);
            $pacientesTipo = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientesTipo = $e->getMessage() ;
        }

        return $pacientesTipo;

    }

    public function graficoProvTipoHemodialisisB($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT prov.nombre as provincia,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.formaInfeccion f 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal. "' 
            AND e.id=1 AND f.id = 2 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY prov.nombre ORDER BY cant DESC";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoProvTipoHemodialisisC($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT prov.nombre as provincia,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.formaInfeccion f 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal. "' 
            AND e.id=2 AND f.id = 2 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY prov.nombre ORDER BY cant DESC";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoSexoProvHepatitisB($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT p.sexo,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND e.id=1 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY p.sexo";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoSexoProvHemodialisisB($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT p.sexo,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.formaInfeccion f 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND e.id=1 
            AND f.id = 2 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY p.sexo";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoSexoProvHepatitisC($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT p.sexo,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND e.id=2 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY p.sexo";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoSexoProvHemodialisisC($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }

            $dql = "SELECT p.sexo,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.formaInfeccion f 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov 
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND e.id=2 
            AND f.id = 2 
            AND d.isActive = 1";

            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY p.sexo";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoCoinfeccionProvHepatitisB($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }
            $dql = "SELECT c.nombre as coinfeccion ,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.coinfecciones r
            JOIN r.coinfeccion c
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND e.id=1 
            AND d.isActive = 1";


            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY c.nombre";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoCoinfeccionProvHepatitisC($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }
            $dql = "SELECT c.nombre as coinfeccion ,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.coinfecciones r
            JOIN r.coinfeccion c 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND e.id=2 AND d.isActive = 1";


            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY c.nombre";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoCoinfeccionHemodialisis($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }
            $dql = "SELECT c.nombre as coinfeccion ,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.coinfecciones r
            JOIN r.coinfeccion c 
            JOIN p.formaInfeccion f 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND f.id = 2 AND d.isActive = 1";


            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY c.nombre";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoCoinfeccionProvHemodialisisB($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }
            $dql = "SELECT c.nombre as coinfeccion ,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.formaInfeccion f 
            JOIN p.coinfecciones r
            JOIN r.coinfeccion c 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND e.id=1 AND f.id = 2 AND d.isActive = 1";


            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY c.nombre";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    public function graficoCoinfeccionProvHemodialisisC($data)
    {

        try{
            $em = $this->getEntityManager();
            if($data['fechaInicial'] !== ''){

                $inicial = new \DateTime($data['fechaInicial']);
                $fechaInicial = $inicial->format('Y-m-d');
            }else{
                $inicial = new \DateTime('01-01-0001');
                $fechaInicial = $inicial->format('Y-m-d');
            }
            if($data['fechaFinal'] !== ''){

                $actual = new \DateTime($data['fechaFinal']);
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }else{
                $actual = new \DateTime('now');
                $tomorrow = $actual->modify('+1 day');
                $fechaFinal = $tomorrow->format('Y-m-d');
            }
            $dql = "SELECT c.nombre as coinfeccion ,count(p) as cant 
            FROM AppBundle:Paciente p 
            JOIN p.etiologia e 
            JOIN p.formaInfeccion f 
            JOIN p.coinfecciones r
            JOIN r.coinfeccion c 
            JOIN p.residenciaDirecciones d 
            JOIN d.municipio m 
            JOIN m.provincia prov
            WHERE p.fechaDiagnostico >= '" .$fechaInicial. "' 
            AND p.fechaDiagnostico < '".$fechaFinal."' 
            AND e.id=2 AND f.id = 2 
            AND d.isActive = 1";


            if($data['municipio'] !== '0') $dql .= " AND m.id = " .$data['municipio'];
            else{
                if($data['provincia'] !== '0') $dql .= " AND prov.id = " .$data['provincia'];
            }

            $dql .= " GROUP BY c.nombre";

            $query = $em->createQuery($dql);
            $pacientes = $query->getResult();

        }catch (\Exception $e)
        {
            $pacientes = $e->getMessage() ;
        }

        return $pacientes;

    }

    //Rango de edades por provincias
    public function graficoPacientesEdadesMenores5()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                WHERE p.edad < :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 5);

        return $query->getResult();

    }

    public function graficoPacientesEdades5y14()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                WHERE p.edad >= :p1
                AND p.edad <= :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 5);
        $query->setParameter('p2', 14);

        return $query->getResult();

    }

    public function graficoPacientesEdades15y19()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                WHERE p.edad >= :p1
                AND p.edad <= :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 15);
        $query->setParameter('p2', 19);

        return $query->getResult();

    }

    public function graficoPacientesEdades20y24()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                WHERE p.edad >= :p1
                AND p.edad <= :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 20);
        $query->setParameter('p2', 24);

        return $query->getResult();

    }

    public function graficoPacientesEdades25y59()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                WHERE p.edad >= :p1
                AND p.edad <= :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 25);
        $query->setParameter('p2', 59);

        return $query->getResult();

    }

    public function graficoPacientesEdades60y65()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                WHERE p.edad >= :p1
                AND p.edad <= :p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 60);
        $query->setParameter('p2', 65);

        return $query->getResult();

    }

    public function graficoPacientesEdadesMas65()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                WHERE p.edad > :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 65);

        return $query->getResult();

    }

    //Rango de edades de la etiologia por provincias
    public function graficoPacientesEdadesMenores5Etiologia($idEtiologia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                JOIN p.etiologia e
                WHERE p.edad < :p1
                AND e.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 5);
        $query->setParameter('p2', $idEtiologia);

        return $query->getResult();

    }

    public function graficoPacientesEdades5y14Etiologia($idEtiologia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                JOIN p.etiologia e
                WHERE p.edad >= :p1
                AND p.edad <= :p2
                AND e.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 5);
        $query->setParameter('p2', 14);
        $query->setParameter('p3', $idEtiologia);

        return $query->getResult();

    }

    public function graficoPacientesEdades15y19Etiologia($idEtiologia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                JOIN p.etiologia e
                WHERE p.edad >= :p1
                AND p.edad <= :p2
                AND e.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 15);
        $query->setParameter('p2', 19);
        $query->setParameter('p3', $idEtiologia);

        return $query->getResult();

    }

    public function graficoPacientesEdades20y24Etiologia($idEtiologia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                JOIN p.etiologia e
                WHERE p.edad >= :p1
                AND p.edad <= :p2
                AND e.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 20);
        $query->setParameter('p2', 24);
        $query->setParameter('p3', $idEtiologia);

        return $query->getResult();

    }

    public function graficoPacientesEdades25y59Etiologia($idEtiologia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                JOIN p.etiologia e
                WHERE p.edad >= :p1
                AND p.edad <= :p2
                AND e.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 25);
        $query->setParameter('p2', 59);
        $query->setParameter('p3', $idEtiologia);

        return $query->getResult();

    }

    public function graficoPacientesEdades60y65Etiologia($idEtiologia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                JOIN p.etiologia e
                WHERE p.edad >= :p1
                AND p.edad <= :p2
                AND e.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 60);
        $query->setParameter('p2', 65);
        $query->setParameter('p3', $idEtiologia);

        return $query->getResult();

    }

    public function graficoPacientesEdadesMas65Etiologia($idEtiologia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                JOIN p.etiologia e
                WHERE p.edad > :p1
                AND e.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 65);
        $query->setParameter('p2', $idEtiologia);

        return $query->getResult();

    }

    //Rango de edades  por provincia seleccionada
    public function graficoPacientesEdadesMenores5Provincia($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad < :p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 5);
        $query->setParameter('p2', $idProvincia);

        return $query->getResult();

    }

    public function graficoPacientesEdades5y14Provincia($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad >= :p1
                AND a.edad <= :p2
                AND p.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 5);
        $query->setParameter('p2', 14);
        $query->setParameter('p3', $idProvincia);

        return $query->getResult();

    }

    public function graficoPacientesEdades15y19Provincia($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad >= :p1
                AND a.edad <= :p2
                AND p.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 15);
        $query->setParameter('p2', 19);
        $query->setParameter('p3', $idProvincia);

        return $query->getResult();

    }

    public function graficoPacientesEdades20y24Provincia($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad >= :p1
                AND a.edad <= :p2
                AND p.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 20);
        $query->setParameter('p2', 24);
        $query->setParameter('p3', $idProvincia);

        return $query->getResult();

    }

    public function graficoPacientesEdades25y59Provincia($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad >= :p1
                AND a.edad <= :p2
                AND p.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 25);
        $query->setParameter('p2', 59);
        $query->setParameter('p3', $idProvincia);

        return $query->getResult();

    }

    public function graficoPacientesEdades60y65Provincia($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad >= :p1
                AND a.edad <= :p2
                AND p.id =:p3';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 60);
        $query->setParameter('p2', 65);
        $query->setParameter('p3', $idProvincia);

        return $query->getResult();

    }

    public function graficoPacientesEdadesMas65Provincia($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad > :p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 65);
        $query->setParameter('p2', $idProvincia);

        return $query->getResult();

    }

    public function graficoTotalHepatitisB()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                JOIN p.etiologia e
                WHERE e.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 1);

        return $query->getResult();

    }

    public function graficoTotalHepatitisC()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(p) as cantidad
                FROM AppBundle:Paciente p
                JOIN p.etiologia e
                WHERE e.id = :p1';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 2);

        return $query->getResult();

    }

    public function graficoTotalHepatitisBProvincia($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                JOIN a.etiologia e
                WHERE e.id = :p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 1);
        $query->setParameter('p2', $idProvincia);

        return $query->getResult();

    }

    public function graficoTotalHepatitisCProvincia($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                JOIN a.etiologia e
                WHERE e.id = :p1
                AND p.id =:p2';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', 2);
        $query->setParameter('p2', $idProvincia);

        return $query->getResult();

    }

    public function graficoTotalHepatitisBEdad($edadInicio,$edadFinal)
    {

        $em = $this->getEntityManager();

        if ($edadInicio === '0') {
            $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.etiologia e
                WHERE e.id = :p1
                AND a.edad < :p3';
        } elseif ($edadInicio === '1') {
            $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.etiologia e
                WHERE e.id = :p1
                AND a.edad > :p3';
        }else {
            $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.etiologia e
                WHERE e.id = :p1
                AND a.edad >= :p2
                AND a.edad <= :p3';
        }


        $query = $em->createQuery($dql);
        $query->setParameter('p1', 1);
        $query->setParameter('p2', $edadInicio);
        $query->setParameter('p3', $edadFinal);

        return $query->getResult();

    }

    public function graficoTotalHepatitisCEdad($edadInicio,$edadFinal)
    {

        $em = $this->getEntityManager();

        if ($edadInicio === '0') {
            $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.etiologia e
                WHERE e.id = :p1
                AND a.edad < :p3';
        } elseif ($edadInicio === '1') {
            $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.etiologia e
                WHERE e.id = :p1
                AND a.edad > :p3';
        }else {
            $dql = 'SELECT COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.etiologia e
                WHERE e.id = :p1
                AND a.edad >= :p2
                AND a.edad <= :p3';
        }


        $query = $em->createQuery($dql);
        $query->setParameter('p1', 2);
        $query->setParameter('p2', $edadInicio);
        $query->setParameter('p3', $edadFinal);

        return $query->getResult();

    }

    public function graficoPacientesProvincias()
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT p.nombre, COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                GROUP BY p.nombre
                ORDER BY cantidad DESC';

        $query = $em->createQuery($dql);

        return $query->getResult();

    }

    public function graficoPacientesProvinciasEtiologia($idEtiologia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT p.nombre, COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                JOIN a.etiologia e
                WHERE e.id =:p1
                GROUP BY p.nombre
                ORDER BY cantidad DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idEtiologia);

        return $query->getResult();

    }

    public function graficoPacientesProvinciasMunicipios($idProvincia)
    {

        $em = $this->getEntityManager();

        $dql = 'SELECT m.nombre, COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE p.id =:p1
                GROUP BY m.nombre
                ORDER BY cantidad DESC';

        $query = $em->createQuery($dql);
        $query->setParameter('p1', $idProvincia);

        return $query->getResult();

    }

    public function graficoPacientesEdadSeleccionada($edadInicio,$edadFinal)
    {

        $em = $this->getEntityManager();

        if ($edadInicio === '0') {
            $dql = 'SELECT p.nombre, COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad < :p2
                GROUP BY p.nombre
                ORDER BY cantidad DESC';
        } elseif ($edadInicio === '1') {
            $dql = 'SELECT p.nombre, COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad > :p2
                GROUP BY p.nombre
                ORDER BY cantidad DESC';
        }else {
            $dql = 'SELECT p.nombre, COUNT(a) as cantidad
                FROM AppBundle:Paciente a
                JOIN a.unidadAtencion u
                JOIN u.municipio m
                JOIN m.provincia p
                WHERE a.edad >= :p1
                AND a.edad <= :p2
                GROUP BY p.nombre
                ORDER BY cantidad DESC';
        }


        $query = $em->createQuery($dql);
        $query->setParameter('p1', $edadInicio);
        $query->setParameter('p2', $edadFinal);

        return $query->getResult();

    }

    public function updateFonetico()
    {

        $localizar = $this->getEntityManager()
            ->createQuery("SELECT p FROM AppBundle:Paciente p WHERE p.fonNombre=' ' ")
            ->getResult();

        return $localizar;

    }

    public function graficoPacientesIncidenciaB($year)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p 
                  WHERE year(p.fechaDiagnostico) = '" . $year . "'
                  AND p.etiologia_id = 1
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoPacientesIncidenciaC($year)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p
                  WHERE year(p.fechaDiagnostico) = '" . $year . "'
                  AND p.etiologia_id = 2
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoPacientesPrevalenciaB($year)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p, paciente_tratamiento_resultado as ptr, evolucion_clinica as ec 
                  WHERE p.id = ptr.paciente_id
                  AND ptr.evolucion_clinica_id = ec.id
                  AND year(p.fechaDiagnostico) <= '" . $year . "'
                  AND p.etiologia_id = 1
                  AND ec.id <> 8
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoPacientesPrevalenciaC($year)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p, paciente_tratamiento_resultado as ptr, evolucion_clinica as ec 
                  WHERE p.id = ptr.paciente_id
                  AND ptr.evolucion_clinica_id = ec.id
                  AND year(p.fechaDiagnostico) <= '" . $year . "'
                  AND p.etiologia_id = 2
                  AND ec.id <> 8
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoPacientesIncidenciaYearB($year)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p
                  WHERE year(p.fechaDiagnostico) = '" . $year . "' 
                  group by month(p.fechaDiagnostico);";

        $query1 = "SELECT year(p.fechaDiagnostico), count(*) as cantidad
                  FROM paciente as p
                  group by year(p.fechaDiagnostico);";

        $query2 = "SELECT count(*) as cantidad
                  FROM paciente as p
                  WHERE year(p.fechaDiagnostico) = '';";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoPacientesIncidenciaBSexo($year,$sexo)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p 
                  WHERE year(p.fechaDiagnostico) = '" . $year . "'
                  AND p.etiologia_id = 1
                  AND p.sexo = '" . $sexo . "'
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoPacientesIncidenciaCSexo($year,$sexo)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p
                  WHERE year(p.fechaDiagnostico) = '" . $year . "'
                  AND p.etiologia_id = 2
                  AND p.sexo = '" . $sexo . "'
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoPacientesPrevalenciaBSexo($year,$sexo)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p, paciente_tratamiento_resultado as ptr, evolucion_clinica as ec 
                  WHERE p.id = ptr.paciente_id
                  AND ptr.evolucion_clinica_id = ec.id
                  AND year(p.fechaDiagnostico) <= '" . $year . "'
                  AND p.etiologia_id = 1
                  AND p.sexo = '" . $sexo . "'
                  AND ec.id <> 8
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoPacientesPrevalenciaCSexo($year,$sexo)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p, paciente_tratamiento_resultado as ptr, evolucion_clinica as ec 
                  WHERE p.id = ptr.paciente_id
                  AND ptr.evolucion_clinica_id = ec.id
                  AND year(p.fechaDiagnostico) <= '" . $year . "'
                  AND p.etiologia_id = 2
                  AND p.sexo = '" . $sexo . "'
                  AND ec.id <> 8
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoTotalPacientesIncidenciaSexo($year,$sexo)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p 
                  WHERE year(p.fechaDiagnostico) = '" . $year . "'
                  AND p.sexo = '" . $sexo . "'
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoTotalPacientesIncidencia($year)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT month(p.fechaDiagnostico) as mes, count(*) as cantidad
                  FROM paciente as p 
                  WHERE year(p.fechaDiagnostico) = '" . $year . "'
                  group by month(p.fechaDiagnostico);";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoMortalidadBYear($year,$totalPoblacionYearActual)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT cf.nombre as causa, (count(*)/" . $totalPoblacionYearActual .") * 100000 as cantidad
                  FROM paciente as p, causa_fallecimiento cf
                  WHERE p.causa_fallecimiento_id = cf.id
                  AND year(p.fechaFallecimiento) <= '" . $year . "'
                  AND p.etiologia_id = 1
                  GROUP BY cf.nombre
                  ORDER BY cantidad DESC;";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoMortalidadCYear($year,$totalPoblacionYearActual)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT cf.nombre as causa, (count(*)/" . $totalPoblacionYearActual .") * 100000 as cantidad
                  FROM paciente as p, causa_fallecimiento cf
                  WHERE p.causa_fallecimiento_id = cf.id
                  AND year(p.fechaFallecimiento) <= '" . $year . "'
                  AND p.etiologia_id = 2
                  GROUP BY cf.nombre
                  ORDER BY cantidad DESC;";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoMortalidadBYearSexo($year,$totalPoblacionYearActual,$sexo)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT cf.nombre as causa, (count(*)/" . $totalPoblacionYearActual .") * 100000 as cantidad
                  FROM paciente as p, causa_fallecimiento cf
                  WHERE p.causa_fallecimiento_id = cf.id
                  AND year(p.fechaFallecimiento) <= '" . $year . "'
                  AND p.etiologia_id = 1
                  AND p.sexo = '" . $sexo . "'
                  GROUP BY cf.nombre
                  ORDER BY cantidad DESC;";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }

    public function graficoMortalidadCYearSexo($year,$totalPoblacionYearActual,$sexo)
    {

        $em = $this->getEntityManager();

        $db = $em->getConnection();

        $query = "SELECT cf.nombre as causa, (count(*)/" . $totalPoblacionYearActual .") * 100000 as cantidad
                  FROM paciente as p, causa_fallecimiento cf
                  WHERE p.causa_fallecimiento_id = cf.id
                  AND year(p.fechaFallecimiento) <= '" . $year . "'
                  AND p.etiologia_id = 2
                  AND p.sexo = '" . $sexo . "'
                  GROUP BY cf.nombre
                  ORDER BY cantidad DESC;";

        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);

        return $stmt->fetchAll();

    }
}
